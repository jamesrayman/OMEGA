; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\..\..\..\..\DOCUME~1\CE_DEV\EXAMPLES\BASE\SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
_fracSimplify:
	LD	HL,-9
	CALL	__frameset
	LD	IY,(IX+6)
	LD	BC,(IY+0)
	LD	(IX+-3),BC
	LD	BC,(IY+3)
	LD	(IX+-6),BC
	JR	L_0
L_1:
	LD	BC,(IX+-6)
	LD	(IX+-9),BC
	LD	HL,(IX+-3)
	LD	BC,(IX+-6)
	CALL	__irems
	LD	(IX+-6),HL
	LD	BC,(IX+-9)
	LD	(IX+-3),BC
L_0:
	LD	BC,0
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_1
	LD	IY,(IX+6)
	LD	HL,(IY+0)
	LD	BC,(IX+-3)
	CALL	__idivs
	LD	(IY+0),HL
	LD	HL,(IY+3)
	LD	BC,(IX+-3)
	CALL	__idivs
	LD	(IY+3),HL
	LD	HL,(IY+3)
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JP	P,L__2
	JP	PE,L_4
	JR	L__3
L__2:
	JP	PO,L_4
L__3:
	LD	IY,(IX+6)
	LD	HL,(IY+0)
	CALL	__ineg
	LD	(IY+0),HL
	LD	HL,(IY+3)
	CALL	__ineg
	LD	(IY+3),HL
L_4:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fracSimplify ***************************
;Name                         Addr/Register   Size   Type
;tmp                                   IX-9      3   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;frac                                  IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_fracAdd:
	LD	HL,-6
	CALL	__frameset
	LD	HL,(IX+9)
	LD	BC,(IX+18)
	CALL	__imuls
	LD	DE,HL
	LD	HL,(IX+15)
	LD	BC,(IX+12)
	CALL	__imuls
	ADD	HL,DE
	LD	(IX+-6),HL
	LD	HL,(IX+12)
	LD	BC,(IX+18)
	CALL	__imuls
	LD	(IX+-3),HL
	PEA	IX+-6
	CALL	_fracSimplify
	POP	BC
	LEA	HL,IX+6
	LD	DE,(HL)
	LEA	HL,IX+-6
	LD	BC,6
	LDIR	
	LD	HL,(IX+6)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fracAdd ***************************
;Name                         Addr/Register   Size   Type
;res                                   IX-6      6   variable
;rhs                                  IX+15      6   parameter
;lhs                                   IX+9      6   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


_fracSubt:
	LD	HL,-6
	CALL	__frameset
	LD	HL,(IX+15)
	CALL	__ineg
	LD	(IX+15),HL
	PUSH	BC
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	ADD	HL,SP
	LD	DE,HL
	LEA	HL,IX+15
	LD	BC,6
	LDIR	
	PUSH	BC
	PUSH	BC
	LD	IY,0
	ADD	IY,SP
	LEA	HL,IX+9
	PEA	IX+-6
	LD	DE,IY
	LD	BC,6
	LDIR	
	CALL	_fracAdd
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+6	; spill
	LD	DE,(IY)
	LD	BC,6
	LDIR	
	LD	HL,(IX+6)	; spill
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fracSubt ***************************
;Name                         Addr/Register   Size   Type
;rhs                                  IX+15      6   parameter
;lhs                                   IX+9      6   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


_fracMult:
	LD	HL,-6
	CALL	__frameset
	LD	HL,(IX+9)
	LD	BC,(IX+15)
	CALL	__imuls
	LD	(IX+-6),HL
	LD	HL,(IX+12)
	LD	BC,(IX+18)
	CALL	__imuls
	LD	(IX+-3),HL
	PEA	IX+-6
	CALL	_fracSimplify
	POP	BC
	LEA	HL,IX+6
	LD	DE,(HL)
	LEA	HL,IX+-6
	LD	BC,6
	LDIR	
	LD	HL,(IX+6)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fracMult ***************************
;Name                         Addr/Register   Size   Type
;res                                   IX-6      6   variable
;rhs                                  IX+15      6   parameter
;lhs                                   IX+9      6   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


_fracDiv:
	LD	HL,-6
	CALL	__frameset
	LD	HL,(IX+9)
	LD	BC,(IX+18)
	CALL	__imuls
	LD	(IX+-6),HL
	LD	HL,(IX+12)
	LD	BC,(IX+15)
	CALL	__imuls
	LD	(IX+-3),HL
	PEA	IX+-6
	CALL	_fracSimplify
	POP	BC
	LEA	HL,IX+6
	LD	DE,(HL)
	LEA	HL,IX+-6
	LD	BC,6
	LDIR	
	LD	HL,(IX+6)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fracDiv ***************************
;Name                         Addr/Register   Size   Type
;res                                   IX-6      6   variable
;rhs                                  IX+15      6   parameter
;lhs                                   IX+9      6   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


_fracPow:
	LD	HL,-17
	CALL	__frameset
	LD	BC,0
	LD	HL,(IX+15)
	OR	A,A
	SBC	HL,BC
	JP	P,L__10
	JP	PE,L_10
	JR	L__11
L__10:
	JP	PO,L_10
L__11:
	LD	HL,(IX+15)
	CALL	__ineg
	LD	(IX+15),HL
	LD	BC,(IX+9)
	LD	(IX+-3),BC
	LD	BC,(IX+12)
	LD	(IX+9),BC
	LD	BC,(IX+-3)
	LD	(IX+12),BC
L_10:
	LD	BC,(IX+15)
	CALL	__itol
	CALL	__ltof
	LD	(IX+-16),BC
	LD	BC,(IX+18)
	LD	(IX+-17),A
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-16)
	LD	A,(IX+-17)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	LD	BC,(IX+9)
	CALL	__itol
	CALL	__ltof
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pow
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_round
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-9),BC
	LD	BC,(IX+15)
	CALL	__itol
	CALL	__ltof
	LD	(IX+-12),BC
	LD	BC,(IX+18)
	LD	(IX+-13),A
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-12)
	LD	A,(IX+-13)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	LD	BC,(IX+12)
	CALL	__itol
	CALL	__ltof
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_pow
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	_round
	LD	BC,HL
	POP	HL
	POP	HL
	LD	A,E
	CALL	__ftol
	LD	(IX+-6),BC
	PEA	IX+-9
	CALL	_fracSimplify
	POP	BC
	LEA	HL,IX+6
	LD	DE,(HL)
	LEA	HL,IX+-9
	LD	BC,6
	LDIR	
	LD	HL,(IX+6)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fracPow ***************************
;Name                         Addr/Register   Size   Type
;_pow                                IMPORT  -----   function
;_round                              IMPORT  -----   function
;res                                   IX-9      6   variable
;t                                     IX-3      3   variable
;rhs                                  IX+15      6   parameter
;lhs                                   IX+9      6   parameter


; Stack Frame Size: 38 (bytes)
;       Spill Code: 0 (instruction)


_digit:
	CALL	__frameset0
	LD	A,(IX+6)
	CP	A,48
	JP	M,L__18
	JP	PE,L_15
	JR	L__19
L__18:
	JP	PO,L_15
L__19:
	LD	A,90
	CP	A,(IX+6)
	JP	M,L__20
	JP	PE,L_15
	JR	L__21
L__20:
	JP	PO,L_15
L__21:
	LD	A,(IX+6)
	CP	A,65
	JP	P,L__22
	JP	PE,L_17
	JR	L__23
L__22:
	JP	PO,L_17
L__23:
	LD	A,57
	CP	A,(IX+6)
	JP	P,L__24
	JP	PE,L_17
	JR	L__25
L__24:
	JP	PO,L_17
L__25:
L_15:
	LD	HL,16777215
	JR	L_19
L_17:
	LD	A,(IX+6)
	CP	A,65
	JP	P,L__26
	JP	PE,L_18
	JR	L__27
L__26:
	JP	PO,L_18
L__27:
	LD	A,(IX+6)
	SEXT	HL
	LD	L,(IX+6)
	LD	IY,HL
	LEA	HL,IY+-48
	JR	L_19
L_18:
	LD	A,(IX+6)
	SEXT	HL
	LD	L,(IX+6)
	LD	IY,HL
	LEA	HL,IY+-55
L_19:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _digit ***************************
;Name                         Addr/Register   Size   Type
;c                                     IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_fracParse:
	LD	HL,-39
	CALL	__frameset
	LEA	DE,IX+-15
	LD	HL,_0temp20
	LD	BC,6
	LDIR	
	LEA	DE,IX+-9
	LD	HL,_1temp21
	LD	BC,6
	LDIR	
	LD	DE,16777215
	LD	(IX+-24),DE
	LD	(IX+-27),DE
	LD	DE,0
	LD	(IX+-21),DE
	LD	DE,(IX+12)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,DE
	JP	M,L__45
	JP	PE,L_37
	JR	L__46
L__45:
	JP	PO,L_37
L__46:
	LEA	HL,IX+6
	LD	DE,(HL)
	LEA	HL,IX+-15
	LD	BC,6
	LDIR	
	LD	HL,(IX+6)
	JR	L_62
L_37:
	LD	DE,0
	LD	(IX+-3),DE
	JR	L_36
L_34:
	LD	DE,16777215
	LD	HL,(IX+-24)
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_28
	LD	DE,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,DE
	LD	A,(HL)
	LD	D,A
	SEXT	HL
	LD	L,D
	OR	A,A
	LD	DE,46
	SBC	HL,DE
	JR	NZ,L_28
	LD	DE,(IX+-3)
	LD	(IX+-24),DE
L_28:
	LD	DE,16777215
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_33
	LD	DE,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,DE
	LD	A,(HL)
	LD	D,A
	SEXT	HL
	LD	L,D
	OR	A,A
	LD	DE,123
	SBC	HL,DE
	JR	NZ,L_33
	LD	DE,(IX+-3)
	LD	(IX+-27),DE
L_33:
	LD	DE,16777215
	LD	HL,(IX+-24)
	OR	A,A
	SBC	HL,DE
	JR	Z,L_35
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_35
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	(IX+-39),BC
	CALL	_digit
	LD	BC,(IX+-39)
	POP	DE
	LD	DE,16777215
	OR	A,A
	SBC	HL,DE
	JR	Z,L_35
	LD	DE,(IX+-21)
	INC	DE
	LD	(IX+-21),DE
L_35:
	LD	DE,(IX+-3)
	INC	DE
	LD	(IX+-3),DE
L_36:
	LD	DE,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	JP	M,L__47
	JP	PE,L_34
	JR	L__48
L__47:
	JP	PO,L_34
L__48:
	LD	DE,0
	LD	(IX+-3),DE
	JR	L_45
L_43:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(IX+-30),HL
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	(IX+-39),BC
	CALL	_digit
	LD	BC,(IX+-39)
	POP	DE
	LD	(IX+-18),HL
	LD	DE,16777215
	OR	A,A
	SBC	HL,DE
	JR	Z,L_42
	LD	HL,(IX+-15)
	LD	BC,(IX+15)
	CALL	__imuls
	LD	(IX+-15),HL
	LD	DE,(IX+-18)
	LD	HL,(IX+-15)
	ADD	HL,DE
	LD	(IX+-15),HL
L_42:
	LD	HL,(IX+-30)
	LD	A,(HL)
	LD	D,A
	SEXT	HL
	LD	L,D
	OR	A,A
	LD	DE,123
	SBC	HL,DE
	JR	NZ,L_44
	LD	DE,(IX+-3)
	INC	DE
	LD	(IX+-3),DE
	JR	L_51
L_44:
	LD	DE,(IX+-3)
	INC	DE
	LD	(IX+-3),DE
L_45:
	LD	DE,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	JP	M,L__49
	JP	PE,L_43
	JR	L__50
L__49:
	JP	PO,L_43
L__50:
	JR	L_51
L_49:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	LD	(IX+-39),BC
	CALL	_digit
	LD	BC,(IX+-39)
	POP	DE
	LD	(IX+-18),HL
	LD	DE,16777215
	OR	A,A
	SBC	HL,DE
	JR	Z,L_50
	LD	HL,(IX+-9)
	LD	BC,(IX+15)
	CALL	__imuls
	LD	(IX+-9),HL
	LD	BC,(IX+-18)
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	HL,(IX+-6)
	LD	BC,(IX+15)
	CALL	__imuls
	LD	(IX+-6),HL
	LD	DE,(IX+15)
	LD	HL,(IX+-6)
	DEC	DE
	ADD	HL,DE
	LD	(IX+-6),HL
L_50:
	LD	DE,(IX+-3)
	INC	DE
	LD	(IX+-3),DE
L_51:
	LD	DE,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	JP	M,L__51
	JP	PE,L_49
	JR	L__52
L__51:
	JP	PO,L_49
L__52:
	LD	DE,0
	LD	(IX+-3),DE
	JR	L_56
L_54:
	LD	HL,(IX+-12)
	LD	BC,(IX+15)
	CALL	__imuls
	LD	(IX+-12),HL
	LD	HL,(IX+-6)
	LD	BC,(IX+15)
	CALL	__imuls
	LD	(IX+-6),HL
	LD	DE,(IX+-3)
	INC	DE
	LD	(IX+-3),DE
L_56:
	LD	DE,(IX+-21)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	JP	M,L__53
	JP	PE,L_54
	JR	L__54
L__53:
	JP	PO,L_54
L__54:
	LD	DE,0
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,DE
	JR	Z,L_59
	PUSH	BC
	PUSH	BC
	LEA	HL,IX+-9
	LD	BC,6
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	PUSH	BC
	PUSH	BC
	LEA	HL,IX+-15
	LD	BC,6
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	PEA	IX+-36
	CALL	_fracAdd
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-15
	LD	BC,6
	LDIR	
	JR	L_61
L_59:
	PEA	IX+-15
	CALL	_fracSimplify
	POP	BC
L_61:
	LEA	HL,IX+6
	LD	DE,(HL)
	LEA	HL,IX+-15
	LD	BC,6
	LDIR	
	LD	HL,(IX+6)
L_62:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fracParse ***************************
;Name                         Addr/Register   Size   Type
;_1temp21                            STATIC      6   variable
;_0temp20                            STATIC      6   variable
;G_0                                  IX-30      3   variable
;brace                                IX-27      3   variable
;dot                                  IX-24      3   variable
;norep                                IX-21      3   variable
;d                                    IX-18      3   variable
;res                                  IX-15      6   variable
;rep                                   IX-9      6   variable
;i                                     IX-3      3   variable
;base                                 IX+15      3   parameter
;len                                  IX+12      3   parameter
;str                                   IX+9      3   parameter


; Stack Frame Size: 57 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT TEXT
_0temp20:
	DW	0
	DB	0
	DW	1
	DB	0
_1temp21:
	DW	0
	DB	0
	DW	0
	DB	0
	SEGMENT DATA
_outputBase:
	DW	10
	DB	0
_outputMode:
	DW	0
	DB	0
	SEGMENT BSS
_tokens:
	DS	560
	SEGMENT DATA
_toki:
	DW	0
	DB	0
	SEGMENT CODE
_isOperator:
	LD	HL,-3
	CALL	__frameset
	LD	A,(IX+6)
	CP	A,43
	JR	Z,L_67
	LD	A,(IX+6)
	CP	A,45
	JR	Z,L_67
	LD	A,(IX+6)
	CP	A,42
	JR	Z,L_67
	LD	A,(IX+6)
	CP	A,47
	JR	Z,L_67
	LD	A,(IX+6)
	CP	A,94
	JR	NZ,L_68
L_67:
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_69
L_68:
	LD	BC,0
	LD	(IX+-3),BC
L_69:
	LD	HL,(IX+-3)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isOperator ***************************
;Name                         Addr/Register   Size   Type
;temp70                                IX-3      3   variable
;c                                     IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


_isSymbol:
	LD	HL,-3
	CALL	__frameset
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_isOperator
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_74
	LD	A,(IX+6)
	CP	A,40
	JR	Z,L_74
	LD	A,(IX+6)
	CP	A,41
	JR	NZ,L_75
L_74:
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_76
L_75:
	LD	(IX+-3),BC
L_76:
	LD	HL,(IX+-3)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isSymbol ***************************
;Name                         Addr/Register   Size   Type
;temp77                                IX-3      3   variable
;c                                     IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


_isNumeric:
	LD	HL,-3
	CALL	__frameset
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_digit
	POP	BC
	LD	BC,HL
	LD	HL,16777215
	OR	A,A
	SBC	HL,BC
	JP	M,L__68
	JP	PE,L_80
	JR	L__69
L__68:
	JP	PO,L_80
L__69:
	LD	A,(IX+6)
	CP	A,46
	JR	NZ,L_81
L_80:
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_82
L_81:
	LD	BC,0
	LD	(IX+-3),BC
L_82:
	LD	HL,(IX+-3)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isNumeric ***************************
;Name                         Addr/Register   Size   Type
;temp83                                IX-3      3   variable
;c                                     IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


_prevToken:
	CALL	__frameset0
L_88:
	LD	BC,(IX+6)
	DEC	BC
	LD	(IX+6),BC
	OR	A,A
	LD	HL,16777215
	SBC	HL,BC
	JP	P,L__76
	JP	PE,L_92
	JR	L__77
L__76:
	JP	PO,L_92
L__77:
	LD	BC,(_toki)
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JP	P,L__78
	JP	PE,L_92
	JR	L__79
L__78:
	JP	PO,L_92
L__79:
	LD	HL,(IX+6)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+6)
	SBC	HL,BC
	LD	BC,_tokens
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	CP	A,32
	JR	Z,L_88
L_92:
	LD	BC,(_toki)
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JP	P,L__80
	JP	PE,L_91
	JR	L__81
L__80:
	JP	PO,L_91
L__81:
	LD	BC,0
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JP	P,L__82
	JP	PE,L_93
	JR	L__83
L__82:
	JP	PO,L_93
L__83:
L_91:
	LD	HL,16777215
	JR	L_94
L_93:
	LD	HL,(IX+6)
L_94:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _prevToken ***************************
;Name                         Addr/Register   Size   Type
;_tokens                             STATIC    560   variable
;_toki                               STATIC      3   variable
;index                                 IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_nextToken:
	CALL	__frameset0
L_98:
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
	OR	A,A
	LD	HL,16777215
	SBC	HL,BC
	JP	P,L__90
	JP	PE,L_102
	JR	L__91
L__90:
	JP	PO,L_102
L__91:
	LD	BC,(_toki)
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JP	P,L__92
	JP	PE,L_102
	JR	L__93
L__92:
	JP	PO,L_102
L__93:
	LD	HL,(IX+6)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+6)
	SBC	HL,BC
	LD	BC,_tokens
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	CP	A,32
	JR	Z,L_98
L_102:
	LD	BC,(_toki)
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JP	P,L__94
	JP	PE,L_101
	JR	L__95
L__94:
	JP	PO,L_101
L__95:
	LD	BC,0
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JP	P,L__96
	JP	PE,L_103
	JR	L__97
L__96:
	JP	PO,L_103
L__97:
L_101:
	LD	HL,16777215
	JR	L_104
L_103:
	LD	HL,(IX+6)
L_104:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _nextToken ***************************
;Name                         Addr/Register   Size   Type
;_tokens                             STATIC    560   variable
;_toki                               STATIC      3   variable
;index                                 IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_operands:
	LD	HL,-6
	CALL	__frameset
L_110:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_prevToken
	POP	BC
	LD	IY,(IX+9)
	LD	(IY),HL
	LD	HL,(IX+9)
	LD	HL,(HL)
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	Z,L_116
	LD	IY,(IX+9)
	LD	HL,(IY)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IY)
	SBC	HL,BC
	LD	BC,_tokens
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	CP	A,110
	JR	Z,L_116
	LD	IY,(IX+-3)
	LD	(IY+0),32
	JR	L_110
L_116:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_nextToken
	POP	BC
	LD	IY,(IX+12)
	LD	(IY),HL
	LD	HL,(IX+12)
	LD	HL,(HL)
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	Z,L_120
	LD	IY,(IX+12)
	LD	HL,(IY)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IY)
	SBC	HL,BC
	LD	BC,_tokens
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	CP	A,110
	JR	Z,L_120
	LD	IY,(IX+-6)
	LD	(IY+0),32
	JR	L_116
L_120:
	LD	HL,(IX+9)
	LD	HL,(HL)
	LD	BC,16777215
	OR	A,A
	SBC	HL,BC
	JR	Z,L_119
	LD	HL,(IX+12)
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_121
L_119:
	LD	HL,16777215
	JR	L_122
L_121:
	OR	A,A
	SBC	HL,HL
L_122:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _operands ***************************
;Name                         Addr/Register   Size   Type
;_tokens                             STATIC    560   variable
;G_4                                   IX-6      3   variable
;G_2                                   IX-3      3   variable
;rhs                                  IX+12      3   parameter
;lhs                                   IX+9      3   parameter
;i                                     IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


_exprEval:
	LD	HL,-117
	CALL	__frameset
	LD	DE,1
	LD	(IX+-27),DE
	LD	(IX+-15),DE
	LD	DE,16777215
	LD	(IX+-30),DE
	LD	DE,0
	LD	(IX+-24),DE
	LD	HL,(IX+9)
	OR	A,A
	SBC	HL,DE
	JP	P,L__139
	JP	PE,L_138
	JR	L__140
L__139:
	JP	PO,L_138
L__140:
	LD	DE,(_toki)
	LD	(IX+9),DE
L_138:
	LD	DE,(IX+6)
	LD	(IX+-3),DE
	JR	L_137
L_135:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-3)
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	(IX+-36),HL
	LD	IY,(IX+-36)
	LD	A,(IY+0)
	CP	A,40
	JR	NZ,L_134
	LD	DE,16777215
	LD	HL,(IX+-30)
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_127
	LD	DE,(IX+-3)
	LD	(IX+-30),DE
L_127:
	LD	DE,(IX+-24)
	INC	DE
	LD	(IX+-24),DE
L_134:
	LD	IY,(IX+-36)
	LD	A,(IY+0)
	CP	A,41
	JR	NZ,L_136
	LD	DE,16777215
	LD	HL,(IX+-30)
	OR	A,A
	SBC	HL,DE
	JR	Z,L_132
	LD	DE,1
	LD	HL,(IX+-24)
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_132
	LD	IY,(IX+-36)
	LD	A,32
	LD	(IY+0),A
	LD	HL,(IX+-30)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-30)
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+0),A
	LD	DE,(IX+-30)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	PUSH	HL
	LD	DE,(IX+-30)
	PUSH	DE
	LD	(IX+-117),BC
	CALL	_exprEval
	LD	BC,(IX+-117)
	POP	DE
	POP	DE
L_132:
	LD	DE,(IX+-24)
	DEC	DE
	LD	(IX+-24),DE
L_136:
	LD	DE,(IX+-3)
	INC	DE
	LD	(IX+-3),DE
L_137:
	LD	DE,(IX+6)
	LD	HL,(_toki)
	ADD	HL,DE
	LD	DE,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	JP	M,L__141
	JP	PE,L_135
	JR	L__142
L__141:
	JP	PO,L_135
L__142:
	LD	DE,(IX+6)
	LD	(IX+-3),DE
	JR	L_150
L_148:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	LD	(IX+-18),HL
	LD	BC,_tokens
	ADD	HL,BC
	LD	(IX+-39),HL
	LD	(IX+-63),HL
	LD	IY,(IX+-39)
	LD	C,(IY+0)
	LD	B,0
	PUSH	BC
	LD	(IX+-117),BC
	CALL	_isOperator
	LD	BC,(IX+-117)
	POP	DE
	LD	DE,0
	OR	A,A
	SBC	HL,DE
	JR	Z,L_145
	LD	DE,(IX+-27)
	LD	HL,16777215
	OR	A,A
	SBC	HL,DE
	JP	P,L__143
	JP	PE,L_145
	JR	L__144
L__143:
	JP	PO,L_145
L__144:
	LD	IY,(IX+-39)
	LD	A,(IY+0)
	CP	A,45
	JR	NZ,L_142
	LD	HL,(IX+-15)
	CALL	__ineg
	LD	(IX+-15),HL
L_142:
	LD	DE,(IX+-39)
	LD	(IX+-63),DE
	LD	IY,(IX+-39)
	LD	(IY+0),32
L_145:
	LD	DE,(IX+-63)
	LD	(IX+-51),DE
	LD	IY,(IX+-51)
	LD	A,(IY+0)
	CP	A,94
	JR	NZ,L_147
	LD	DE,(IX+-3)
	LD	(IX+-27),DE
L_147:
	LD	IY,(IX+-51)
	LD	A,(IY+0)
	CP	A,110
	JR	NZ,L_149
	LD	BC,16777215
	LD	(IX+-27),BC
	LD	HL,(IX+-18)
	LD	BC,_tokens
	ADD	HL,BC
	LD	(IX+-78),HL
	LD	IY,(IX+-78)
	LEA	BC,IY+1
	LD	(IX+-75),BC
	LD	IY,(IX+-75)
	LD	HL,(IY+0)
	LD	BC,(IX+-15)
	CALL	__imuls
	LD	(IY+0),HL
	LD	DE,1
	LD	(IX+-15),DE
L_149:
	LD	DE,(IX+-3)
	INC	DE
	LD	(IX+-3),DE
L_150:
	LD	DE,(IX+9)
	LD	HL,(IX+6)
	ADD	HL,DE
	LD	(IX+-21),HL
	LD	DE,(IX+-21)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	JP	M,L__145
	JP	PE,L_148
	JR	L__146
L__145:
	JP	PO,L_148
L__146:
	LD	DE,(IX+6)
	LD	(IX+-3),DE
	JR	L_157
L_155:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-3)
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	(IX+-48),HL
	LD	IY,(IX+-48)
	LD	A,(IY+0)
	CP	A,94
	JR	NZ,L_156
	LD	IY,(IX+-48)
	PEA	IX+-9
	PEA	IX+-6
	LD	(IY+0),32
	LD	DE,(IX+-3)
	PUSH	DE
	LD	(IX+-117),BC
	CALL	_operands
	LD	BC,(IX+-117)
	POP	DE
	POP	DE
	POP	DE
	LD	DE,16777215
	OR	A,A
	SBC	HL,DE
	JR	Z,L_156
	LD	HL,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-9)
	SBC	HL,DE
	PUSH	BC
	PUSH	BC
	LD	BC,6
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+1
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	LD	HL,(IX+-6)
	ADD	HL,HL
	LD	DE,(IX+-6)
	PUSH	BC
	PUSH	BC
	LD	BC,6
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+1
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	PEA	IX+-84
	CALL	_fracPow
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-6)
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+1
	LD	HL,BC
	LD	BC,6
	LDIR	
	LD	HL,(IX+-9)
	LD	DE,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+0),32
L_156:
	LD	DE,(IX+-3)
	INC	DE
	LD	(IX+-3),DE
L_157:
	LD	DE,(IX+-21)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	JP	M,L__147
	JP	PE,L_155
	JR	L__148
L__147:
	JP	PO,L_155
L__148:
	LD	DE,(IX+6)
	LD	(IX+-3),DE
	JR	L_171
L_169:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	LD	(IX+-12),HL
	LD	BC,_tokens
	ADD	HL,BC
	LD	(IX+-33),HL
	LD	(IX+-60),HL
	LD	IY,(IX+-33)
	LD	C,(IY+0)
	LD	B,0
	PUSH	BC
	CALL	_isOperator
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	Z,L_166
	LD	BC,(IX+-27)
	LD	HL,16777215
	OR	A,A
	SBC	HL,BC
	JP	P,L__149
	JP	PE,L_166
	JR	L__150
L__149:
	JP	PO,L_166
L__150:
	LD	IY,(IX+-33)
	LD	A,(IY+0)
	CP	A,45
	JR	NZ,L_162
	LD	HL,(IX+-15)
	CALL	__ineg
	LD	(IX+-15),HL
L_162:
	LD	BC,(IX+-33)
	LD	(IX+-60),BC
	LD	IY,(IX+-33)
	LD	(IY+0),32
L_166:
	LD	BC,(IX+-60)
	LD	(IX+-66),BC
	LD	IY,(IX+-66)
	LD	C,(IY+0)
	LD	B,0
	PUSH	BC
	LD	(IX+-117),BC
	CALL	_isOperator
	LD	BC,(IX+-117)
	POP	DE
	LD	DE,0
	OR	A,A
	SBC	HL,DE
	JR	Z,L_168
	LD	DE,16777215
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,DE
	JR	NZ,L_168
	LD	DE,(IX+-3)
	LD	(IX+-27),DE
L_168:
	LD	IY,(IX+-66)
	LD	A,(IY+0)
	CP	A,110
	JR	NZ,L_170
	LD	BC,16777215
	LD	(IX+-27),BC
	LD	HL,(IX+-12)
	LD	BC,_tokens
	ADD	HL,BC
	LD	(IX+-90),HL
	LD	IY,(IX+-90)
	LEA	BC,IY+1
	LD	(IX+-87),BC
	LD	IY,(IX+-87)
	LD	HL,(IY+0)
	LD	BC,(IX+-15)
	CALL	__imuls
	LD	(IY+0),HL
	LD	DE,1
	LD	(IX+-15),DE
L_170:
	LD	DE,(IX+-3)
	INC	DE
	LD	(IX+-3),DE
L_171:
	LD	DE,(IX+-21)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	JP	M,L__151
	JP	PE,L_169
	JR	L__152
L__151:
	JP	PO,L_169
L__152:
	LD	DE,(IX+6)
	LD	(IX+-3),DE
	JR	L_181
L_179:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-3)
	SBC	HL,DE
	LD	(IX+-42),HL
	LD	DE,_tokens
	ADD	HL,DE
	LD	(IX+-69),HL
	LD	IY,(IX+-69)
	LD	A,(IY+0)
	CP	A,42
	JR	NZ,L_178
	LD	IY,(IX+-69)
	PEA	IX+-9
	PEA	IX+-6
	LD	(IY+0),32
	LD	DE,(IX+-3)
	PUSH	DE
	LD	(IX+-117),BC
	CALL	_operands
	LD	BC,(IX+-117)
	POP	DE
	POP	DE
	POP	DE
	LD	DE,16777215
	OR	A,A
	SBC	HL,DE
	JR	Z,L_178
	LD	HL,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-9)
	SBC	HL,DE
	PUSH	BC
	PUSH	BC
	LD	BC,6
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+1
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	LD	HL,(IX+-6)
	ADD	HL,HL
	LD	DE,(IX+-6)
	PUSH	BC
	PUSH	BC
	LD	BC,6
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+1
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	PEA	IX+-96
	CALL	_fracMult
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-6)
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+1
	LD	HL,BC
	LD	BC,6
	LDIR	
	LD	HL,(IX+-9)
	LD	DE,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+0),32
L_178:
	LD	DE,_tokens
	LD	HL,(IX+-42)
	ADD	HL,DE
	LD	(IX+-72),HL
	LD	IY,(IX+-72)
	LD	A,(IY+0)
	CP	A,47
	JR	NZ,L_180
	LD	IY,(IX+-72)
	PEA	IX+-9
	PEA	IX+-6
	LD	(IY+0),32
	LD	DE,(IX+-3)
	PUSH	DE
	LD	(IX+-117),BC
	CALL	_operands
	LD	BC,(IX+-117)
	POP	DE
	POP	DE
	POP	DE
	LD	DE,16777215
	OR	A,A
	SBC	HL,DE
	JR	Z,L_180
	LD	HL,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-9)
	SBC	HL,DE
	PUSH	BC
	PUSH	BC
	LD	BC,6
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+1
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	LD	HL,(IX+-6)
	ADD	HL,HL
	LD	DE,(IX+-6)
	PUSH	BC
	PUSH	BC
	LD	BC,6
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+1
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	PEA	IX+-102
	CALL	_fracDiv
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-6)
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+1
	LD	HL,BC
	LD	BC,6
	LDIR	
	LD	HL,(IX+-9)
	LD	DE,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+0),32
L_180:
	LD	DE,(IX+-3)
	INC	DE
	LD	(IX+-3),DE
L_181:
	LD	DE,(IX+-21)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	JP	M,L__153
	JP	PE,L_179
	JR	L__154
L__153:
	JP	PO,L_179
L__154:
	LD	DE,(IX+6)
	LD	(IX+-3),DE
	JR	L_191
L_189:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-3)
	SBC	HL,DE
	LD	(IX+-45),HL
	LD	DE,_tokens
	ADD	HL,DE
	LD	(IX+-54),HL
	LD	IY,(IX+-54)
	LD	A,(IY+0)
	CP	A,43
	JR	NZ,L_188
	LD	IY,(IX+-54)
	PEA	IX+-9
	PEA	IX+-6
	LD	(IY+0),32
	LD	DE,(IX+-3)
	PUSH	DE
	LD	(IX+-117),BC
	CALL	_operands
	LD	BC,(IX+-117)
	POP	DE
	POP	DE
	POP	DE
	LD	DE,16777215
	OR	A,A
	SBC	HL,DE
	JR	Z,L_188
	LD	HL,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-9)
	SBC	HL,DE
	PUSH	BC
	PUSH	BC
	LD	BC,6
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+1
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	LD	HL,(IX+-6)
	ADD	HL,HL
	LD	DE,(IX+-6)
	PUSH	BC
	PUSH	BC
	LD	BC,6
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+1
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	PEA	IX+-108
	CALL	_fracAdd
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-6)
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+1
	LD	HL,BC
	LD	BC,6
	LDIR	
	LD	HL,(IX+-9)
	LD	DE,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+0),32
L_188:
	LD	DE,_tokens
	LD	HL,(IX+-45)
	ADD	HL,DE
	LD	(IX+-57),HL
	LD	IY,(IX+-57)
	LD	A,(IY+0)
	CP	A,45
	JR	NZ,L_190
	LD	IY,(IX+-57)
	PEA	IX+-9
	PEA	IX+-6
	LD	(IY+0),32
	LD	DE,(IX+-3)
	PUSH	DE
	LD	(IX+-117),BC
	CALL	_operands
	LD	BC,(IX+-117)
	POP	DE
	POP	DE
	POP	DE
	LD	DE,16777215
	OR	A,A
	SBC	HL,DE
	JR	Z,L_190
	LD	HL,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-9)
	SBC	HL,DE
	PUSH	BC
	PUSH	BC
	LD	BC,6
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+1
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	LD	HL,(IX+-6)
	ADD	HL,HL
	LD	DE,(IX+-6)
	PUSH	BC
	PUSH	BC
	LD	BC,6
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	HL,IY+1
	LD	IY,0
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	PEA	IX+-114
	CALL	_fracSubt
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-6)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	DE,(IX+-6)
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LEA	DE,IY+1
	LD	HL,BC
	LD	BC,6
	LDIR	
	LD	HL,(IX+-9)
	LD	DE,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,DE
	LD	DE,_tokens
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+0),32
L_190:
	LD	DE,(IX+-3)
	INC	DE
	LD	(IX+-3),DE
L_191:
	LD	DE,(IX+-21)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,DE
	JP	M,L__155
	JP	PE,L_189
	JR	L__156
L__155:
	JP	PO,L_189
L__156:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _exprEval ***************************
;Name                         Addr/Register   Size   Type
;_tokens                             STATIC    560   variable
;_toki                               STATIC      3   variable
;G_35                                 IX-72      3   variable
;G_32                                 IX-69      3   variable
;G_28                                 IX-66      3   variable
;G_14                                 IX-63      3   variable
;G_26                                 IX-60      3   variable
;G_41                                 IX-57      3   variable
;G_38                                 IX-54      3   variable
;G_16                                 IX-51      3   variable
;G_18                                 IX-48      3   variable
;G_39                                 IX-45      3   variable
;G_33                                 IX-42      3   variable
;G_10                                 IX-39      3   variable
;G_5                                  IX-36      3   variable
;G_22                                 IX-33      3   variable
;paren                                IX-30      3   variable
;op                                   IX-27      3   variable
;stack                                IX-24      3   variable
;G_20                                 IX-21      3   variable
;G_17                                 IX-18      3   variable
;multiplier                           IX-15      3   variable
;G_29                                 IX-12      3   variable
;rhs                                   IX-9      3   variable
;lhs                                   IX-6      3   variable
;i                                     IX-3      3   variable
;len                                   IX+9      3   parameter
;start                                 IX+6      3   parameter


; Stack Frame Size: 129 (bytes)
;       Spill Code: 0 (instruction)


_fracEval:
	LD	HL,-84
	CALL	__frameset
	LD	BC,16777215
	LD	(IX+-6),BC
	LD	(IX+-9),BC
	LEA	DE,IX+-42
	LD	HL,_2temp194
	LD	BC,6
	LDIR	
	LD	HL,(IX+12)
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JP	P,L__178
	JP	PE,L_196
	JR	L__179
L__178:
	JP	PO,L_196
L__179:
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+12),HL
L_196:
	LD	BC,(IX+12)
	LD	(IX+-21),BC
	LD	BC,(IX+12)
	DEC	BC
	LD	(IX+-3),BC
	JR	L_201
L_199:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,58
	SBC	HL,BC
	JR	NZ,L_200
	LD	BC,(IX+-3)
	LD	(IX+-21),BC
	JR	L_209
L_200:
	LD	BC,(IX+-3)
	DEC	BC
	LD	(IX+-3),BC
L_201:
	LD	BC,(IX+-3)
	LD	HL,16777215
	OR	A,A
	SBC	HL,BC
	JP	M,L__180
	JP	PE,L_199
	JR	L__181
L__180:
	JP	PO,L_199
L__181:
L_209:
	LD	BC,(IX+-21)
	INC	BC
	LD	(IX+-3),BC
	JR	L_208
L_206:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(IX+-27),HL
	LD	(IX+-36),HL
	LD	HL,(IX+-27)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,46
	SBC	HL,BC
	JR	NZ,L_205
	LD	BC,(IX+-27)
	LD	(IX+-36),BC
	LD	HL,(IX+-27)
	LD	(HL),32
	LD	BC,0
	LD	(_outputMode),BC
L_205:
	LD	BC,(IX+-36)
	LD	(IX+-33),BC
	LD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,47
	SBC	HL,BC
	JR	NZ,L_207
	LD	HL,(IX+-33)
	LD	(HL),32
	LD	BC,1
	LD	(_outputMode),BC
L_207:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_208:
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__182
	JP	PE,L_206
	JR	L__183
L__182:
	JP	PO,L_206
L__183:
	LD	BC,(IX+12)
	LD	HL,(IX+-21)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_211
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-21)
	LD	HL,(IX+12)
	OR	A,A
	SBC	HL,BC
	DEC	HL
	PUSH	HL
	LD	BC,(IX+-21)
	LD	HL,(IX+9)
	ADD	HL,BC
	INC	HL
	PUSH	HL
	PEA	IX+-48
	CALL	_fracParse
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(HL)
	LD	(_outputBase),BC
	JR	L_214
L_211:
	LD	BC,10
	LD	(_outputBase),BC
L_214:
	LD	BC,0
	LD	HL,(_outputBase)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_233
	LD	BC,10
	LD	(_outputBase),BC
L_233:
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_232
L_230:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	(IX+-24),HL
	LD	HL,(IX+-12)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_isSymbol
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	Z,L_226
	LD	BC,(IX+-6)
	LD	HL,16777215
	OR	A,A
	SBC	HL,BC
	JP	P,L__184
	JP	PE,L_222
	JR	L__185
L__184:
	JP	PO,L_222
L__185:
	LD	HL,(_toki)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_toki)
	SBC	HL,BC
	LD	BC,_tokens
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+-15)
	LD	(IY+0),110
	OR	A,A
	LD	HL,(IX+-9)
	LD	BC,16777215
	SBC	HL,BC
	JR	NZ,L_217
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-6)
	LD	HL,(IX+9)
	ADD	HL,BC
	PUSH	HL
	PEA	IX+-54
	CALL	_fracParse
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+-15)
	LEA	DE,IY+1
	LD	BC,6
	LDIR	
	JR	L_219
L_217:
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-9)
	LD	HL,(IX+9)
	ADD	HL,BC
	PUSH	HL
	PEA	IX+-60
	CALL	_fracParse
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-6)
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-6)
	LD	HL,(IX+9)
	ADD	HL,BC
	PUSH	HL
	PEA	IX+-66
	CALL	_fracParse
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+-15)
	LEA	DE,IY+1
	LD	BC,6
	LDIR	
L_219:
	LD	BC,(_toki)
	INC	BC
	LD	(_toki),BC
	LD	BC,16777215
	LD	(IX+-9),BC
	LD	(IX+-6),BC
L_222:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,(_toki)
	LD	(IX+-12),HL
	LD	DE,(IX+-12)
	LD	(IX+-24),DE
	LD	HL,(IX+-12)
	LD	A,(HL)
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,_tokens
	ADD	HL,BC
	LD	IY,HL
	LD	(IY+0),A
	LD	BC,(_toki)
	INC	BC
	LD	(_toki),BC
L_226:
	LD	BC,16777215
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_229
	LD	BC,(IX+-12)
	LD	(IX+-24),BC
	LD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_isNumeric
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	Z,L_229
	LD	BC,(IX+-3)
	LD	(IX+-6),BC
L_229:
	LD	BC,(IX+-6)
	LD	HL,16777215
	OR	A,A
	SBC	HL,BC
	JP	P,L__186
	JP	PE,L_231
	JR	L__187
L__186:
	JP	PO,L_231
L__187:
	LD	HL,(IX+-24)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,44
	SBC	HL,BC
	JR	NZ,L_231
	LD	BC,(IX+-3)
	LD	(IX+-9),BC
L_231:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_232:
	LD	BC,(IX+-21)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__188
	JP	PE,L_230
	JR	L__189
L__188:
	JP	PO,L_230
L__189:
	LD	BC,(IX+-6)
	LD	HL,16777215
	OR	A,A
	SBC	HL,BC
	JP	P,L__190
	JP	PE,L_240
	JR	L__191
L__190:
	JP	PO,L_240
L__191:
	LD	HL,(_toki)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(_toki)
	SBC	HL,BC
	LD	BC,_tokens
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	IY,(IX+-18)
	LD	(IY+0),110
	OR	A,A
	LD	HL,(IX+-9)
	LD	BC,16777215
	SBC	HL,BC
	JR	NZ,L_235
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-6)
	LD	HL,(IX+9)
	ADD	HL,BC
	PUSH	HL
	PEA	IX+-72
	CALL	_fracParse
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+-18)
	LEA	DE,IY+1
	LD	BC,6
	LDIR	
	JR	L_237
L_235:
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-9)
	LD	HL,(IX+9)
	ADD	HL,BC
	PUSH	HL
	PEA	IX+-78
	CALL	_fracParse
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,(IX+-6)
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-6)
	LD	HL,(IX+9)
	ADD	HL,BC
	PUSH	HL
	PEA	IX+-84
	CALL	_fracParse
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+-18)
	LEA	DE,IY+1
	LD	BC,6
	LDIR	
L_237:
	LD	BC,(_toki)
	INC	BC
	LD	(_toki),BC
	LD	BC,16777215
	LD	(IX+-9),BC
	LD	(IX+-6),BC
L_240:
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_exprEval
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_245
L_243:
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	LD	BC,(IX+-3)
	SBC	HL,BC
	LD	BC,_tokens
	ADD	HL,BC
	LD	(IX+-30),HL
	LD	IY,(IX+-30)
	LD	A,(IY+0)
	CP	A,110
	JR	NZ,L_244
	LD	IY,(IX+-30)
	LEA	HL,IX+6	; spill
	LD	DE,(HL)
	LEA	HL,IY+1
	LD	BC,6
	LDIR	
	LD	HL,(IX+6)	; spill
	JR	L_247
L_244:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_245:
	LD	BC,(_toki)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__192
	JP	PE,L_243
	JR	L__193
L__192:
	JP	PO,L_243
L__193:
	LEA	HL,IX+6	; spill
	LD	DE,(HL)
	LEA	HL,IX+-42
	LD	BC,6
	LDIR	
	LD	HL,(IX+6)	; spill
L_247:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _fracEval ***************************
;Name                         Addr/Register   Size   Type
;_toki                               STATIC      3   variable
;_tokens                             STATIC    560   variable
;_outputBase                         STATIC      3   variable
;_outputMode                         STATIC      3   variable
;_strlen                             IMPORT  -----   function
;_2temp194                           STATIC      6   variable
;f                                    IX-42      6   variable
;G_44                                 IX-36      3   variable
;G_45                                 IX-33      3   variable
;G_56                                 IX-30      3   variable
;G_43                                 IX-27      3   variable
;G_51                                 IX-24      3   variable
;colon                                IX-21      3   variable
;G_52                                 IX-18      3   variable
;G_46                                 IX-15      3   variable
;G_50                                 IX-12      3   variable
;comma                                 IX-9      3   variable
;numStart                              IX-6      3   variable
;i                                     IX-3      3   variable
;len                                  IX+12      3   parameter
;str                                   IX+9      3   parameter


; Stack Frame Size: 99 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT TEXT
_2temp194:
	DW	0
	DB	0
	DW	1
	DB	0
	SEGMENT BSS
_res:
	DS	20
	SEGMENT DATA
_resi:
	DW	0
	DB	0
	SEGMENT CODE
_numeral:
	CALL	__frameset0
	LD	BC,(IX+6)
	LD	HL,9
	OR	A,A
	SBC	HL,BC
	JP	P,L__196
	JP	PE,L_249
	JR	L__197
L__196:
	JP	PO,L_249
L__197:
	LD	A,(IX+6)
	ADD	A,55
	JR	L_250
L_249:
	LD	A,(IX+6)
	ADD	A,48
L_250:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _numeral ***************************
;Name                         Addr/Register   Size   Type
;n                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_baseConvInt:
	LD	HL,-16
	CALL	__frameset
	LD	BC,0
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_255
	LD	BC,_res
	LD	HL,(_resi)
	ADD	HL,BC
	LD	(HL),48
	LD	BC,(_resi)
	INC	BC
	LD	(_resi),BC
	JR	L_266
L_255:
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JP	P,L__203
	JP	PE,L_256
	JR	L__204
L__203:
	JP	PO,L_256
L__204:
	LD	BC,_res
	LD	HL,(_resi)
	ADD	HL,BC
	LD	(HL),45
	LD	BC,(_resi)
	INC	BC
	LD	(_resi),BC
	LD	HL,(IX+6)
	CALL	__ineg
	LD	(IX+6),HL
L_256:
	LD	BC,(_resi)
	LD	(IX+-3),BC
	JR	L_258
L_259:
	LD	HL,(IX+6)
	LD	BC,(IX+9)
	CALL	__irems
	PUSH	HL
	LD	BC,(_resi)
	LD	(IX+-16),BC
	CALL	_numeral
	LD	BC,(IX+-16)
	POP	DE
	LD	DE,_res
	LD	HL,BC
	ADD	HL,DE
	LD	(HL),A
	LD	BC,(_resi)
	INC	BC
	LD	(_resi),BC
	LD	HL,(IX+6)
	LD	BC,(IX+9)
	CALL	__idivs
	LD	(IX+6),HL
L_258:
	LD	BC,(IX+6)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	M,L__205
	JP	PE,L_259
	JR	L__206
L__205:
	JP	PO,L_259
L__206:
	LD	BC,(_resi)
	DEC	BC
	LD	(IX+-6),BC
	JR	L_263
L_264:
	LD	BC,(IX+-3)
	LD	HL,_res
	ADD	HL,BC
	LD	(IX+-13),HL
	LD	A,(HL)
	LD	(IX+-7),A
	LD	BC,(IX+-6)
	LD	HL,_res
	ADD	HL,BC
	LD	(IX+-10),HL
	LD	A,(HL)
	LD	HL,(IX+-13)
	LD	(HL),A
	LD	HL,(IX+-10)
	LD	A,(IX+-7)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
L_263:
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__207
	JP	PE,L_264
	JR	L__208
L__207:
	JP	PO,L_264
L__208:
	LD	HL,(_resi)
	LD	BC,_res
	ADD	HL,BC
	LD	(HL),0
L_266:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _baseConvInt ***************************
;Name                         Addr/Register   Size   Type
;_resi                               STATIC      3   variable
;_res                                STATIC     20   variable
;c                                     IX-7      1   variable
;end                                   IX-6      3   variable
;start                                 IX-3      3   variable
;base                                  IX+9      3   parameter
;x                                     IX+6      3   parameter


; Stack Frame Size: 28 (bytes)
;       Spill Code: 0 (instruction)


_baseConvReal:
	LD	HL,-30
	CALL	__frameset
	LD	BC,0
	LD	(IX+-6),BC
	LD	HL,(IX+6)
	LD	E,(IX+9)
	XOR	A,A
	CALL	__fcmp
	JP	P,L_270
	LD	BC,_res
	LD	HL,(_resi)
	ADD	HL,BC
	LD	(HL),45
	LD	BC,(_resi)
	INC	BC
	LD	(_resi),BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	LD	HL,8388608
	LD	E,191
	CALL	__fmul
	LD	(IX+6),BC
	LD	(IX+9),A
L_270:
	LD	BC,_res
	LD	HL,(_resi)
	ADD	HL,BC
	LD	(HL),48
	LD	BC,(_resi)
	INC	BC
	LD	(_resi),BC
	JR	L_272
L_273:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
	LD	BC,(IX+12)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fdiv
	LD	(IX+6),BC
	LD	(IX+9),A
L_272:
	LD	BC,(IX+12)
	CALL	__itol
	CALL	__ltof
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fcmp
	JP	P,L_273
	JR	L_279
L_280:
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(_resi)
	LD	(IX+-30),BC	; spill
	CALL	_floor
	POP	IY
	POP	IY
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	PUSH	BC
	CALL	_numeral
	POP	DE
	LD	DE,_res
	LD	HL,(IX+-30)
	ADD	HL,DE
	LD	(HL),A
	LD	BC,(_resi)
	INC	BC
	LD	(_resi),BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_floor
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	(IX+6),BC
	LD	(IX+9),A
	LD	BC,(IX+12)
	CALL	__itol
	CALL	__ltof
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	(IX+6),BC
	LD	(IX+9),A
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	NZ,L_278
	LD	BC,_res
	LD	HL,(_resi)
	ADD	HL,BC
	LD	(HL),46
	LD	BC,(_resi)
	INC	BC
	LD	(_resi),BC
L_278:
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
L_279:
	LD	BC,14
	LD	HL,(_resi)
	OR	A,A
	SBC	HL,BC
	JP	M,L__224
	JP	PE,L_280
	JR	L__225
L__224:
	JP	PO,L_280
L__225:
	LD	BC,(_resi)
	LD	(IX+-3),BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fmul
	LD	HL,BC
	LD	BC,(IX+12)
	LD	E,A
	CALL	__itol
	CALL	__ltof
	CALL	__fcmp
	JP	M,L_300
	LD	BC,1
	LD	(IX+-18),BC
	JR	L_289
L_284:
	LD	BC,(IX+-3)
	DEC	BC
	LD	(IX+-3),BC
	LD	HL,_res
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,46
	SBC	HL,BC
	JR	Z,L_284
	LD	HL,(IX+-9)
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_digit
	POP	BC
	LD	(IX+-24),HL
	LD	BC,HL
	INC	BC
	LD	(IX+-21),BC
	LD	HL,(IX+12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_288
	LD	HL,(IX+-9)
	LD	(HL),48
	JR	L_289
L_288:
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	_numeral
	POP	BC
	LD	HL,(IX+-9)
	LD	(HL),A
	LD	BC,0
	LD	(IX+-18),BC
L_289:
	LD	BC,0
	LD	HL,(IX+-18)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_284
L_300:
	LD	BC,0
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_307
	LD	(IX+-3),BC
	JR	L_296
L_294:
	LD	BC,(IX+-3)
	LD	HL,_res
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,45
	SBC	HL,BC
	JR	Z,L_295
	LD	HL,(IX+-3)
	INC	HL
	LD	IY,(IX+-12)
	LD	BC,_res
	ADD	HL,BC
	LD	A,(HL)
	LD	(IY),A
L_295:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_296:
	LD	BC,(_resi)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__226
	JP	PE,L_294
	JR	L__227
L__226:
	JP	PO,L_294
L__227:
	LD	BC,(_resi)
	DEC	BC
	LD	(_resi),BC
	LD	HL,(_resi)
	LD	BC,_res
	ADD	HL,BC
	LD	(HL),0
L_307:
	LD	BC,(_resi)
	DEC	BC
	LD	(IX+-3),BC
	JR	L_306
L_304:
	LD	BC,(IX+-3)
	LD	HL,_res
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,48
	SBC	HL,BC
	JR	NZ,L_310
	LD	HL,(IX+-15)
	LD	(HL),0
	LD	BC,(IX+-3)
	DEC	BC
	LD	(IX+-3),BC
L_306:
	LD	BC,(IX+-3)
	LD	HL,16777215
	OR	A,A
	SBC	HL,BC
	JP	M,L__228
	JP	PE,L_304
	JR	L__229
L__228:
	JP	PO,L_304
L__229:
L_310:
	LD	BC,_res
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,46
	SBC	HL,BC
	JR	NZ,L_311
	LD	BC,_res
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	DEC	BC
	LD	(IX+-3),BC
L_311:
	LD	BC,(IX+-3)
	INC	BC
	LD	(_resi),BC
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <fileioc.h>
;    6	
;    7	#include <math.h>
;    8	#include <stdio.h>
;    9	#include <stdlib.h>
;   10	#include <string.h>
;   11	
;   12	#include "base.h"
;   13	
;   14	void printText(const char *text, uint8_t x, uint8_t y);
;   15	void printTextSmall(const char *text, uint8_t xpos, uint8_t ypos);
;   16	void replaceChars (char *entry);
;   17	
;   18	void main(void) {
;   19	    char input[160];
;   20	    int i;
;   21	    Fraction frac;
;   22	    real_t a, b;
;   23	
;   24	    //char str[10];
;   25	
;   26	    /*os_ClrHome();
;   27	
;   28		printText("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f", 0, 0);
;   29		printText("\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f", 0, 1);
;   30		printText("\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f", 0, 2);
;   31		printText("\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f", 0, 3);
;   32		printText("\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f", 0, 4);
;   33		printText("\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f", 0, 5);
;   34		printText("\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f", 0, 6);
;   35		printText("\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f", 0, 7);
;   36	
;   37	    while (!os_GetCSC());
;   38	
;   39		os_ClrHome();
;   40	
;   41		printText("\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f", 0, 0);
;   42		printText("\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f", 0, 1);
;   43		printText("\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAa\xAb\xAc\xAd\xAe\xAf", 0, 2);
;   44		printText("\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBa\xBb\xBc\xBd\xBe\xBf", 0, 3);
;   45		printText("\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCa\xCb\xCc\xCd\xCe\xCf", 0, 4);
;   46		printText("\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDa\xDb\xDc\xDd\xDe\xDf", 0, 5);
;   47		printText("\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEa\xEb\xEc\xEd\xEe\xEf", 0, 6);
;   48		printText("\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFa\xFb\xFc\xFd\xFe\xFf", 0, 7);
;   49	
;   50	    while (!os_GetCSC());*/
;   51	
;   52	
;   53	    os_ClrHome();
;   54	    os_GetStringInput("Expr: ", input, sizeof input);
;   55	
;   56	    replaceChars(input);
;   57	
;   58	    frac = fracEval(input, -1);
;   59	
;   60	    if (outputMode == 0) { // decimal
;   61	        baseConvReal(frac.num * 1.0 / frac.denom, outputBase);
;   62	    } else { // fraction
;   63	        baseConvInt(frac.num, outputBase);
;   64	        res[resi++] = '/';
;   65	        baseConvInt(frac.denom, outputBase);
;   66	    }
;   67	    printText(res, 0, 9);
;   68	
;   69	    //printText(input, 0, 1);
;   70	    //sprintf(str, "%d", (unsigned)input[0]);
;   71	    //printText(str, 0, 2);
;   72	
;   73	    a = os_Int24ToReal(frac.num);
;   74	    b = os_Int24ToReal(frac.denom);
;   75	
;   76	    ti_SetVar(TI_REAL_TYPE, ti_A, &a);
;   77	    ti_SetVar(TI_REAL_TYPE, ti_B, &b);
;   78	
;   79	    while (!os_GetCSC());
;   80	}
;   81	
;   82	/* Draw text on the homescreen at the given X/Y location */
;   83	void printText(const char *text, uint8_t xpos, uint8_t ypos) {
;   84	    os_SetCursorPos(ypos, xpos);
;   85	    os_PutStrFull(text);
;   86	}
;   87	
;   88	/* Draw small text at the given X/Y location */
;   89	void printTextSmall(const char *text, uint8_t xpos, uint8_t ypos) {
;   90	    os_FontDrawText(text, xpos, ypos);
;   91	}
;   92	void replaceChars (char *entry) {
;   93	    const char orig [] = "pq\x82\x83\xf0\x10\x11\x08\x09:\xb0>+";
;   94	    const char repl [] = "+-*" "/" "^" "(" ")" "{" "}" ".-" ":,";
;   95	                    //    +-*/^(){}.-:,
;   96	
;   97	    int i, j, len = strlen(entry);
;   98	    for (i = 0; i < len; i++) {
;   99	        for (j = 0; j < sizeof orig; j++) {
;  100	            if (entry[i] == orig[j]) {
;  101	                entry[i] = repl[j];
;  102	                break;
;  103	            }
;  104	        }
;  105	    }
;  106	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _baseConvReal ***************************
;Name                         Addr/Register   Size   Type
;_floor                              IMPORT  -----   function
;_resi                               STATIC      3   variable
;_res                                STATIC     20   variable
;d                                    IX-24      3   variable
;G_61                                 IX-21      3   variable
;roundup                              IX-18      3   variable
;G_63                                 IX-15      3   variable
;G_62                                 IX-12      3   variable
;G_58                                  IX-9      3   variable
;dot                                   IX-6      3   variable
;i                                     IX-3      3   variable
;base                                 IX+12      3   parameter
;x                                     IX+6      4   parameter


; Stack Frame Size: 45 (bytes)
;       Spill Code: -1 (instruction)


_main:
	LD	HL,-219
	CALL	__frameset
	LD	BC,_asm_ClrLCD
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	__OS
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,160
	PUSH	BC
	LD	HL,IX
	LD	BC,-184
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,L__231
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_os_GetStringInput
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	HL,IX
	LD	BC,-184
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_replaceChars
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	LD	BC,16777215
	PUSH	BC
	LD	HL,IX
	LD	BC,-184
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	HL,IX
	LD	BC,-190
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-219
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_fracEval
	PUSH	BC
	LD	BC,-219
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-6
	LD	BC,6
	LDIR	
	LD	HL,(_outputMode)
	OR	A,A
	LD	BC,0
	SBC	HL,BC
	JR	NZ,L_318
	LD	BC,(_outputBase)
	PUSH	BC
	LD	BC,(IX+-6)
	CALL	__itol
	CALL	__ltof
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-86),BC	; spill
	POP	IY
	LD	BC,(IX+-3)
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-88),A
	POP	IY
	CALL	__itol
	CALL	__ltof
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-83),BC	; spill
	LD	HL,(IY+-86)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-83)
	LD	(IY+-87),H
	LD	H,(IY+-88)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-87)
	POP	IY
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_baseConvReal
	POP	BC
	POP	BC
	POP	BC
	JR	L_319
L_318:
	LD	BC,(_outputBase)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_baseConvInt
	POP	BC
	POP	BC
	LD	HL,(_resi)
	LD	BC,_res
	ADD	HL,BC
	LD	(HL),47
	LD	BC,(_resi)
	INC	BC
	LD	(_resi),BC
	LD	BC,(_outputBase)
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_baseConvInt
	POP	BC
	POP	BC
L_319:
	LD	BC,9
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_res
	PUSH	BC
	CALL	_printText
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	HL,IX
	LD	BC,-199
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_os_Int24ToReal
	POP	BC
	POP	BC
	LEA	DE,IX+-24
	LD	BC,9
	LDIR	
	LD	BC,(IX+-3)
	PUSH	BC
	LD	HL,IX
	LD	BC,-208
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_os_Int24ToReal
	POP	BC
	POP	BC
	LEA	DE,IX+-15
	PEA	IX+-24
	LD	BC,L__233
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,9
	LDIR	
	CALL	_ti_SetVar
	POP	BC
	POP	BC
	POP	BC
	PEA	IX+-15
	LD	BC,L__234
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_ti_SetVar
	POP	BC
	POP	BC
	POP	BC
L_321:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_321
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_os_GetCSC                          IMPORT  -----   function
;_ti_SetVar                          IMPORT  -----   function
;_os_Int24ToReal                     IMPORT  -----   function
;_printText                          IMPORT  -----   function
;_res                                STATIC     20   variable
;_resi                               STATIC      3   variable
;_outputBase                         STATIC      3   variable
;_outputMode                         STATIC      3   variable
;_replaceChars                       IMPORT  -----   function
;_os_GetStringInput                  IMPORT  -----   function
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;input                               IX-184    160   variable
;a                                    IX-24      9   variable
;b                                    IX-15      9   variable
;frac                                  IX-6      6   variable


; Stack Frame Size: 225 (bytes)
;       Spill Code: -4 (instruction)


	SEGMENT STRSECT
L__231:
	DB	"Expr: "
	DB	0
L__233:
	DB	"A"
	DB	0,0,0
L__234:
	DB	"B"
	DB	0,0,0
	SEGMENT CODE
_printText:
	CALL	__frameset0
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+12)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printText ***************************
;Name                         Addr/Register   Size   Type
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;ypos                                 IX+12      1   parameter
;xpos                                  IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -4 (instruction)


_printTextSmall:
	CALL	__frameset0
	LD	C,(IX+12)
	LD	B,0
	PUSH	BC
	LD	C,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_FontDrawText
	POP	BC
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printTextSmall ***************************
;Name                         Addr/Register   Size   Type
;_os_FontDrawText                    IMPORT  -----   function
;ypos                                 IX+12      1   parameter
;xpos                                  IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: -4 (instruction)


_replaceChars:
	LD	HL,-40
	CALL	__frameset
	LEA	DE,IX+-40
	LD	HL,_3temp325
	LD	BC,14
	LDIR	
	LEA	DE,IX+-26
	LD	HL,_4temp326
	LD	BC,14
	LDIR	
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+-12),HL
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_335
L_333:
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_332
L_330:
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	BC,(IX+-3)
	LEA	HL,IX+-40
	ADD	HL,BC
	LD	A,(HL)
	LD	HL,(IX+-9)
	CP	A,(HL)
	JR	NZ,L_331
	LD	BC,(IX+-3)
	LD	IY,(IX+-9)
	LEA	HL,IX+-26
	ADD	HL,BC
	LD	A,(HL)
	LD	(IY),A
	JR	L_334
L_331:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_332:
	LD	BC,14
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_330
L_334:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_335:
	LD	BC,(IX+-12)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JP	M,L_333
	LD	SP,IX
	POP	IX
	RET	


;**************************** _replaceChars ***************************
;Name                         Addr/Register   Size   Type
;_strlen                             IMPORT  -----   function
;_4temp326                           STATIC     14   variable
;_3temp325                           STATIC     14   variable
;orig                                 IX-40     14   variable
;repl                                 IX-26     14   variable
;len                                  IX-12      3   variable
;G_64                                  IX-9      3   variable
;i                                     IX-6      3   variable
;j                                     IX-3      3   variable
;entry                                 IX+6      3   parameter


; Stack Frame Size: 49 (bytes)
;       Spill Code: -4 (instruction)


	SEGMENT TEXT
_3temp325:
	DB	112
	DB	113
	DB	130
	DB	131
	DB	240
	DB	16
	DB	17
	DB	8
	DB	9
	DB	58
	DB	176
	DB	62
	DB	43
	DB	0
_4temp326:
	DB	43
	DB	45
	DB	42
	DB	47
	DB	94
	DB	40
	DB	41
	DB	123
	DB	125
	DB	46
	DB	45
	DB	58
	DB	44
	DB	0
	XREF _strlen:ROM
	XREF _round:ROM
	XREF _floor:ROM
	XREF _pow:ROM
	XREF _ti_SetVar:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _os_GetCSC:ROM
	XREF _os_GetStringInput:ROM
	XREF _os_Int24ToReal:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_FontDrawText:ROM
	XREF _os_SetCursorPos:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __ineg:ROM
	XREF __irems:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XDEF _replaceChars
	XDEF _printTextSmall
	XDEF _printText
	XDEF _main
	XDEF _baseConvReal
	XDEF _baseConvInt
	XDEF _numeral
	XDEF _resi
	XDEF _res
	XDEF _fracEval
	XDEF _exprEval
	XDEF _operands
	XDEF _nextToken
	XDEF _prevToken
	XDEF _isNumeric
	XDEF _isSymbol
	XDEF _isOperator
	XDEF _toki
	XDEF _tokens
	XDEF _outputMode
	XDEF _outputBase
	XDEF _fracParse
	XDEF _digit
	XDEF _fracPow
	XDEF _fracDiv
	XDEF _fracMult
	XDEF _fracSubt
	XDEF _fracAdd
	XDEF _fracSimplify
	END
